/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver;


import de.oth.othappserver.tables.Building;
import de.oth.othappserver.tables.BuildingFaculties;
import de.oth.othappserver.tables.BuildingFloors;
import de.oth.othappserver.tables.ElectionCandidate;
import de.oth.othappserver.tables.ElectionInfo;
import de.oth.othappserver.tables.Equipment;
import de.oth.othappserver.tables.Eventcategory;
import de.oth.othappserver.tables.Eventorganizer;
import de.oth.othappserver.tables.Faculty;
import de.oth.othappserver.tables.Feed;
import de.oth.othappserver.tables.Room;
import de.oth.othappserver.tables.records.BuildingFacultiesRecord;
import de.oth.othappserver.tables.records.BuildingFloorsRecord;
import de.oth.othappserver.tables.records.BuildingRecord;
import de.oth.othappserver.tables.records.ElectionCandidateRecord;
import de.oth.othappserver.tables.records.ElectionInfoRecord;
import de.oth.othappserver.tables.records.EquipmentRecord;
import de.oth.othappserver.tables.records.EventcategoryRecord;
import de.oth.othappserver.tables.records.EventorganizerRecord;
import de.oth.othappserver.tables.records.FacultyRecord;
import de.oth.othappserver.tables.records.FeedRecord;
import de.oth.othappserver.tables.records.RoomRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BuildingRecord> BUILDING_PKEY = Internal.createUniqueKey(Building.BUILDING, DSL.name("building_pkey"), new TableField[] { Building.BUILDING.ID }, true);
    public static final UniqueKey<BuildingFacultiesRecord> PK_BUILDING_FACULTIES = Internal.createUniqueKey(BuildingFaculties.BUILDING_FACULTIES, DSL.name("pk_building_faculties"), new TableField[] { BuildingFaculties.BUILDING_FACULTIES.BUILDING, BuildingFaculties.BUILDING_FACULTIES.FACULTY }, true);
    public static final UniqueKey<ElectionCandidateRecord> ELECTION_CANDIDATE_PKEY = Internal.createUniqueKey(ElectionCandidate.ELECTION_CANDIDATE, DSL.name("election_candidate_pkey"), new TableField[] { ElectionCandidate.ELECTION_CANDIDATE.ID }, true);
    public static final UniqueKey<ElectionInfoRecord> ELECTION_INFO_PKEY = Internal.createUniqueKey(ElectionInfo.ELECTION_INFO, DSL.name("election_info_pkey"), new TableField[] { ElectionInfo.ELECTION_INFO.ID }, true);
    public static final UniqueKey<EquipmentRecord> EQUIPMENT_NAME_KEY = Internal.createUniqueKey(Equipment.EQUIPMENT, DSL.name("equipment_name_key"), new TableField[] { Equipment.EQUIPMENT.NAME }, true);
    public static final UniqueKey<EquipmentRecord> EQUIPMENT_PKEY = Internal.createUniqueKey(Equipment.EQUIPMENT, DSL.name("equipment_pkey"), new TableField[] { Equipment.EQUIPMENT.ID }, true);
    public static final UniqueKey<EventcategoryRecord> EVENTCATEGORY_PKEY = Internal.createUniqueKey(Eventcategory.EVENTCATEGORY, DSL.name("eventcategory_pkey"), new TableField[] { Eventcategory.EVENTCATEGORY.ID }, true);
    public static final UniqueKey<EventorganizerRecord> EVENTORGANIZER_PKEY = Internal.createUniqueKey(Eventorganizer.EVENTORGANIZER, DSL.name("eventorganizer_pkey"), new TableField[] { Eventorganizer.EVENTORGANIZER.ID }, true);
    public static final UniqueKey<FacultyRecord> FACULTY_IDENTIFIER_KEY = Internal.createUniqueKey(Faculty.FACULTY, DSL.name("faculty_identifier_key"), new TableField[] { Faculty.FACULTY.IDENTIFIER }, true);
    public static final UniqueKey<FacultyRecord> FACULTY_PKEY = Internal.createUniqueKey(Faculty.FACULTY, DSL.name("faculty_pkey"), new TableField[] { Faculty.FACULTY.ID }, true);
    public static final UniqueKey<FeedRecord> FEED_PKEY = Internal.createUniqueKey(Feed.FEED, DSL.name("feed_pkey"), new TableField[] { Feed.FEED.ID }, true);
    public static final UniqueKey<RoomRecord> ROOM_PKEY = Internal.createUniqueKey(Room.ROOM, DSL.name("room_pkey"), new TableField[] { Room.ROOM.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BuildingFacultiesRecord, BuildingRecord> BUILDING_FACULTIES__FK_BFACULTIES_BUILDING = Internal.createForeignKey(BuildingFaculties.BUILDING_FACULTIES, DSL.name("fk_bfaculties_building"), new TableField[] { BuildingFaculties.BUILDING_FACULTIES.BUILDING }, Keys.BUILDING_PKEY, new TableField[] { Building.BUILDING.ID }, true);
    public static final ForeignKey<BuildingFacultiesRecord, FacultyRecord> BUILDING_FACULTIES__FK_BFACULTIES_FACULTY = Internal.createForeignKey(BuildingFaculties.BUILDING_FACULTIES, DSL.name("fk_bfaculties_faculty"), new TableField[] { BuildingFaculties.BUILDING_FACULTIES.FACULTY }, Keys.FACULTY_PKEY, new TableField[] { Faculty.FACULTY.ID }, true);
    public static final ForeignKey<BuildingFloorsRecord, BuildingRecord> BUILDING_FLOORS__FK_BFLOOR_BUILDING = Internal.createForeignKey(BuildingFloors.BUILDING_FLOORS, DSL.name("fk_bfloor_building"), new TableField[] { BuildingFloors.BUILDING_FLOORS.BUILDING }, Keys.BUILDING_PKEY, new TableField[] { Building.BUILDING.ID }, true);
    public static final ForeignKey<FeedRecord, FacultyRecord> FEED__FK_FEED_FACULTY = Internal.createForeignKey(Feed.FEED, DSL.name("fk_feed_faculty"), new TableField[] { Feed.FEED.FACULTY }, Keys.FACULTY_PKEY, new TableField[] { Faculty.FACULTY.ID }, true);
    public static final ForeignKey<RoomRecord, EquipmentRecord> ROOM__FK_EQUIPMENT = Internal.createForeignKey(Room.ROOM, DSL.name("fk_equipment"), new TableField[] { Room.ROOM.EQUIPMENT }, Keys.EQUIPMENT_PKEY, new TableField[] { Equipment.EQUIPMENT.ID }, true);
}

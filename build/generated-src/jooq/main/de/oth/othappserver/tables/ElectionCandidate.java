/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables;


import de.oth.othappserver.Keys;
import de.oth.othappserver.Public;
import de.oth.othappserver.tables.records.ElectionCandidateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElectionCandidate extends TableImpl<ElectionCandidateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.election_candidate</code>
     */
    public static final ElectionCandidate ELECTION_CANDIDATE = new ElectionCandidate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElectionCandidateRecord> getRecordType() {
        return ElectionCandidateRecord.class;
    }

    /**
     * The column <code>public.election_candidate.id</code>.
     */
    public final TableField<ElectionCandidateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.election_candidate.info</code>.
     */
    public final TableField<ElectionCandidateRecord, JSON> INFO = createField(DSL.name("info"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>public.election_candidate.image</code>.
     */
    public final TableField<ElectionCandidateRecord, byte[]> IMAGE = createField(DSL.name("image"), SQLDataType.BLOB, this, "");

    private ElectionCandidate(Name alias, Table<ElectionCandidateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElectionCandidate(Name alias, Table<ElectionCandidateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.election_candidate</code> table reference
     */
    public ElectionCandidate(String alias) {
        this(DSL.name(alias), ELECTION_CANDIDATE);
    }

    /**
     * Create an aliased <code>public.election_candidate</code> table reference
     */
    public ElectionCandidate(Name alias) {
        this(alias, ELECTION_CANDIDATE);
    }

    /**
     * Create a <code>public.election_candidate</code> table reference
     */
    public ElectionCandidate() {
        this(DSL.name("election_candidate"), null);
    }

    public <O extends Record> ElectionCandidate(Table<O> child, ForeignKey<O, ElectionCandidateRecord> key) {
        super(child, key, ELECTION_CANDIDATE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ElectionCandidateRecord, Integer> getIdentity() {
        return (Identity<ElectionCandidateRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ElectionCandidateRecord> getPrimaryKey() {
        return Keys.ELECTION_CANDIDATE_PKEY;
    }

    @Override
    public List<UniqueKey<ElectionCandidateRecord>> getKeys() {
        return Arrays.<UniqueKey<ElectionCandidateRecord>>asList(Keys.ELECTION_CANDIDATE_PKEY);
    }

    @Override
    public ElectionCandidate as(String alias) {
        return new ElectionCandidate(DSL.name(alias), this);
    }

    @Override
    public ElectionCandidate as(Name alias) {
        return new ElectionCandidate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElectionCandidate rename(String name) {
        return new ElectionCandidate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElectionCandidate rename(Name name) {
        return new ElectionCandidate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, JSON, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

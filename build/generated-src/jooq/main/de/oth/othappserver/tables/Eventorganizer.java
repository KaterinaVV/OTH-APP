/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables;


import de.oth.othappserver.Keys;
import de.oth.othappserver.Public;
import de.oth.othappserver.tables.records.EventorganizerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Eventorganizer extends TableImpl<EventorganizerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eventorganizer</code>
     */
    public static final Eventorganizer EVENTORGANIZER = new Eventorganizer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventorganizerRecord> getRecordType() {
        return EventorganizerRecord.class;
    }

    /**
     * The column <code>public.eventorganizer.id</code>.
     */
    public final TableField<EventorganizerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.eventorganizer.name</code>.
     */
    public final TableField<EventorganizerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.eventorganizer.email</code>.
     */
    public final TableField<EventorganizerRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.eventorganizer.description</code>.
     */
    public final TableField<EventorganizerRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(5000), this, "");

    private Eventorganizer(Name alias, Table<EventorganizerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Eventorganizer(Name alias, Table<EventorganizerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eventorganizer</code> table reference
     */
    public Eventorganizer(String alias) {
        this(DSL.name(alias), EVENTORGANIZER);
    }

    /**
     * Create an aliased <code>public.eventorganizer</code> table reference
     */
    public Eventorganizer(Name alias) {
        this(alias, EVENTORGANIZER);
    }

    /**
     * Create a <code>public.eventorganizer</code> table reference
     */
    public Eventorganizer() {
        this(DSL.name("eventorganizer"), null);
    }

    public <O extends Record> Eventorganizer(Table<O> child, ForeignKey<O, EventorganizerRecord> key) {
        super(child, key, EVENTORGANIZER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EventorganizerRecord> getPrimaryKey() {
        return Keys.EVENTORGANIZER_PKEY;
    }

    @Override
    public List<UniqueKey<EventorganizerRecord>> getKeys() {
        return Arrays.<UniqueKey<EventorganizerRecord>>asList(Keys.EVENTORGANIZER_PKEY);
    }

    @Override
    public Eventorganizer as(String alias) {
        return new Eventorganizer(DSL.name(alias), this);
    }

    @Override
    public Eventorganizer as(Name alias) {
        return new Eventorganizer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Eventorganizer rename(String name) {
        return new Eventorganizer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Eventorganizer rename(Name name) {
        return new Eventorganizer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

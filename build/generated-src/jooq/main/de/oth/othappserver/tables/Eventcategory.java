/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables;


import de.oth.othappserver.Keys;
import de.oth.othappserver.Public;
import de.oth.othappserver.tables.records.EventcategoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Eventcategory extends TableImpl<EventcategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eventcategory</code>
     */
    public static final Eventcategory EVENTCATEGORY = new Eventcategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventcategoryRecord> getRecordType() {
        return EventcategoryRecord.class;
    }

    /**
     * The column <code>public.eventcategory.id</code>.
     */
    public final TableField<EventcategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.eventcategory.name</code>.
     */
    public final TableField<EventcategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.eventcategory.color</code>.
     */
    public final TableField<EventcategoryRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(6), this, "");

    private Eventcategory(Name alias, Table<EventcategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Eventcategory(Name alias, Table<EventcategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eventcategory</code> table reference
     */
    public Eventcategory(String alias) {
        this(DSL.name(alias), EVENTCATEGORY);
    }

    /**
     * Create an aliased <code>public.eventcategory</code> table reference
     */
    public Eventcategory(Name alias) {
        this(alias, EVENTCATEGORY);
    }

    /**
     * Create a <code>public.eventcategory</code> table reference
     */
    public Eventcategory() {
        this(DSL.name("eventcategory"), null);
    }

    public <O extends Record> Eventcategory(Table<O> child, ForeignKey<O, EventcategoryRecord> key) {
        super(child, key, EVENTCATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EventcategoryRecord> getPrimaryKey() {
        return Keys.EVENTCATEGORY_PKEY;
    }

    @Override
    public List<UniqueKey<EventcategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<EventcategoryRecord>>asList(Keys.EVENTCATEGORY_PKEY);
    }

    @Override
    public Eventcategory as(String alias) {
        return new Eventcategory(DSL.name(alias), this);
    }

    @Override
    public Eventcategory as(Name alias) {
        return new Eventcategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Eventcategory rename(String name) {
        return new Eventcategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Eventcategory rename(Name name) {
        return new Eventcategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables.records;


import de.oth.othappserver.tables.BuildingFloors;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BuildingFloorsRecord extends TableRecordImpl<BuildingFloorsRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.building_floors.floor</code>.
     */
    public BuildingFloorsRecord setFloor(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.building_floors.floor</code>.
     */
    public Integer getFloor() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.building_floors.building</code>.
     */
    public BuildingFloorsRecord setBuilding(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.building_floors.building</code>.
     */
    public Integer getBuilding() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.building_floors.plan</code>.
     */
    public BuildingFloorsRecord setPlan(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.building_floors.plan</code>.
     */
    public String getPlan() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return BuildingFloors.BUILDING_FLOORS.FLOOR;
    }

    @Override
    public Field<Integer> field2() {
        return BuildingFloors.BUILDING_FLOORS.BUILDING;
    }

    @Override
    public Field<String> field3() {
        return BuildingFloors.BUILDING_FLOORS.PLAN;
    }

    @Override
    public Integer component1() {
        return getFloor();
    }

    @Override
    public Integer component2() {
        return getBuilding();
    }

    @Override
    public String component3() {
        return getPlan();
    }

    @Override
    public Integer value1() {
        return getFloor();
    }

    @Override
    public Integer value2() {
        return getBuilding();
    }

    @Override
    public String value3() {
        return getPlan();
    }

    @Override
    public BuildingFloorsRecord value1(Integer value) {
        setFloor(value);
        return this;
    }

    @Override
    public BuildingFloorsRecord value2(Integer value) {
        setBuilding(value);
        return this;
    }

    @Override
    public BuildingFloorsRecord value3(String value) {
        setPlan(value);
        return this;
    }

    @Override
    public BuildingFloorsRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BuildingFloorsRecord
     */
    public BuildingFloorsRecord() {
        super(BuildingFloors.BUILDING_FLOORS);
    }

    /**
     * Create a detached, initialised BuildingFloorsRecord
     */
    public BuildingFloorsRecord(Integer floor, Integer building, String plan) {
        super(BuildingFloors.BUILDING_FLOORS);

        setFloor(floor);
        setBuilding(building);
        setPlan(plan);
    }
}

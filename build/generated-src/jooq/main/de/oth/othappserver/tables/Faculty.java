/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables;


import de.oth.othappserver.Indexes;
import de.oth.othappserver.Keys;
import de.oth.othappserver.Public;
import de.oth.othappserver.tables.records.FacultyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Faculty extends TableImpl<FacultyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.faculty</code>
     */
    public static final Faculty FACULTY = new Faculty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacultyRecord> getRecordType() {
        return FacultyRecord.class;
    }

    /**
     * The column <code>public.faculty.id</code>.
     */
    public final TableField<FacultyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.faculty.identifier</code>.
     */
    public final TableField<FacultyRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.faculty.name</code>.
     */
    public final TableField<FacultyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.faculty.color</code>.
     */
    public final TableField<FacultyRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>public.faculty.webuntis_id</code>.
     */
    public final TableField<FacultyRecord, Integer> WEBUNTIS_ID = createField(DSL.name("webuntis_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.faculty.jobmarket_id</code>.
     */
    public final TableField<FacultyRecord, Integer> JOBMARKET_ID = createField(DSL.name("jobmarket_id"), SQLDataType.INTEGER, this, "");

    private Faculty(Name alias, Table<FacultyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Faculty(Name alias, Table<FacultyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.faculty</code> table reference
     */
    public Faculty(String alias) {
        this(DSL.name(alias), FACULTY);
    }

    /**
     * Create an aliased <code>public.faculty</code> table reference
     */
    public Faculty(Name alias) {
        this(alias, FACULTY);
    }

    /**
     * Create a <code>public.faculty</code> table reference
     */
    public Faculty() {
        this(DSL.name("faculty"), null);
    }

    public <O extends Record> Faculty(Table<O> child, ForeignKey<O, FacultyRecord> key) {
        super(child, key, FACULTY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FACULTY_WEBUNTIS_ID_IDX);
    }

    @Override
    public UniqueKey<FacultyRecord> getPrimaryKey() {
        return Keys.FACULTY_PKEY;
    }

    @Override
    public List<UniqueKey<FacultyRecord>> getKeys() {
        return Arrays.<UniqueKey<FacultyRecord>>asList(Keys.FACULTY_PKEY, Keys.FACULTY_IDENTIFIER_KEY);
    }

    @Override
    public Faculty as(String alias) {
        return new Faculty(DSL.name(alias), this);
    }

    @Override
    public Faculty as(Name alias) {
        return new Faculty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Faculty rename(String name) {
        return new Faculty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Faculty rename(Name name) {
        return new Faculty(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables;


import de.oth.othappserver.Keys;
import de.oth.othappserver.Public;
import de.oth.othappserver.tables.records.BuildingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Building extends TableImpl<BuildingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.building</code>
     */
    public static final Building BUILDING = new Building();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildingRecord> getRecordType() {
        return BuildingRecord.class;
    }

    /**
     * The column <code>public.building.id</code>.
     */
    public final TableField<BuildingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.building.identifier</code>.
     */
    public final TableField<BuildingRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.CHAR(1).nullable(false), this, "");

    private Building(Name alias, Table<BuildingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Building(Name alias, Table<BuildingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.building</code> table reference
     */
    public Building(String alias) {
        this(DSL.name(alias), BUILDING);
    }

    /**
     * Create an aliased <code>public.building</code> table reference
     */
    public Building(Name alias) {
        this(alias, BUILDING);
    }

    /**
     * Create a <code>public.building</code> table reference
     */
    public Building() {
        this(DSL.name("building"), null);
    }

    public <O extends Record> Building(Table<O> child, ForeignKey<O, BuildingRecord> key) {
        super(child, key, BUILDING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BuildingRecord> getPrimaryKey() {
        return Keys.BUILDING_PKEY;
    }

    @Override
    public List<UniqueKey<BuildingRecord>> getKeys() {
        return Arrays.<UniqueKey<BuildingRecord>>asList(Keys.BUILDING_PKEY);
    }

    @Override
    public Building as(String alias) {
        return new Building(DSL.name(alias), this);
    }

    @Override
    public Building as(Name alias) {
        return new Building(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Building rename(String name) {
        return new Building(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Building rename(Name name) {
        return new Building(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}

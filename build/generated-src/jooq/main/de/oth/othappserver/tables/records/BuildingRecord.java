/*
 * This file is generated by jOOQ.
 */
package de.oth.othappserver.tables.records;


import de.oth.othappserver.tables.Building;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BuildingRecord extends UpdatableRecordImpl<BuildingRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.building.id</code>.
     */
    public BuildingRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.building.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.building.identifier</code>.
     */
    public BuildingRecord setIdentifier(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.building.identifier</code>.
     */
    public String getIdentifier() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Building.BUILDING.ID;
    }

    @Override
    public Field<String> field2() {
        return Building.BUILDING.IDENTIFIER;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getIdentifier();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getIdentifier();
    }

    @Override
    public BuildingRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BuildingRecord value2(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public BuildingRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BuildingRecord
     */
    public BuildingRecord() {
        super(Building.BUILDING);
    }

    /**
     * Create a detached, initialised BuildingRecord
     */
    public BuildingRecord(Integer id, String identifier) {
        super(Building.BUILDING);

        setId(id);
        setIdentifier(identifier);
    }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package de.oth.othappserver.api

import de.oth.othappserver.model.Candidate
import de.oth.othappserver.model.ElectionInfo
import de.oth.othappserver.model.Error
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.Valid
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface ElectionApi {


    @PostMapping(
            value = ["/v1/candidates"],
            produces = ["text/plain", "application/json"],
            consumes = ["multipart/form-data"]
    )
    fun createCandidate( @RequestParam(value="firstName", required=true) firstName: kotlin.String 
, @RequestParam(value="lastName", required=true) lastName: kotlin.String 
, @RequestParam(value="course", required=true) course: kotlin.String 
, @RequestParam(value="term", required=true) term: kotlin.Int 
, @RequestParam(value="offices", required=true) offices: kotlin.collections.List<kotlin.String> 
, @RequestParam(value="goals", required=true) goals: kotlin.collections.List<kotlin.String> 
, @RequestParam(value="faculty", required=true) faculty: kotlin.String 
, @RequestParam(value="id", required=false) id: kotlin.Int? 
, @RequestParam(value="motto", required=false) motto: kotlin.String? 
, @Valid @RequestPart("file") file: org.springframework.core.io.Resource?
): ResponseEntity<kotlin.String> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @PostMapping(
            value = ["/v1/election"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    fun createElectionInfo( @RequestParam(value="electionStart", required=true) electionStart: java.time.LocalDate 
, @RequestParam(value="electionEnd", required=true) electionEnd: java.time.LocalDate 
, @RequestParam(value="startShowElectionInfo", required=true) startShowElectionInfo: java.time.LocalDate 
, @RequestParam(value="endShowElectionInfo", required=true) endShowElectionInfo: java.time.LocalDate 
, @RequestParam(value="howToVoteShort", required=false) howToVoteShort: kotlin.Any? 
, @RequestParam(value="howToVoteLong", required=false) howToVoteLong: kotlin.Any? 
, @RequestParam(value="whatToVoteSenat", required=false) whatToVoteSenat: kotlin.Any? 
, @RequestParam(value="whatToVoteKonvent", required=false) whatToVoteKonvent: kotlin.Any? 
, @RequestParam(value="whatToVoteFaculty", required=false) whatToVoteFaculty: kotlin.Any? 
): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @DeleteMapping(
            value = ["/v1/candidates/{candidateId}"],
            produces = ["application/json"]
    )
    fun deleteCandidate( @PathVariable("candidateId") candidateId: kotlin.Int
): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @DeleteMapping(
            value = ["/v1/election"],
            produces = ["application/json"]
    )
    fun deleteElectionInfo(): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/v1/candidates/{candidateId}"],
            produces = ["application/json"]
    )
    fun getCandidateById( @PathVariable("candidateId") candidateId: kotlin.Int
): ResponseEntity<Candidate> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/v1/candidates"],
            produces = ["application/json"]
    )
    fun getCandidates(): ResponseEntity<List<Candidate>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/v1/election"],
            produces = ["application/json"]
    )
    fun getElectionInfo(): ResponseEntity<ElectionInfo> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @GetMapping(
            value = ["/v1/candidates/{candidateId}/image"],
            produces = ["image/_*", "application/json"]
    )
    fun getImageOfCandidate( @PathVariable("candidateId") candidateId: kotlin.Int
): ResponseEntity<org.springframework.core.io.Resource> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @PutMapping(
            value = ["/v1/candidates/{candidateId}"],
            produces = ["application/json"],
            consumes = ["application/x-www-form-urlencoded"]
    )
    fun updateCandidate( @PathVariable("candidateId") candidateId: kotlin.Int
, @RequestParam(value="firstName", required=true) firstName: kotlin.String 
, @RequestParam(value="lastName", required=true) lastName: kotlin.String 
, @RequestParam(value="course", required=true) course: kotlin.String 
, @RequestParam(value="term", required=true) term: kotlin.Int 
, @RequestParam(value="offices", required=true) offices: kotlin.collections.List<kotlin.String> 
, @RequestParam(value="goals", required=true) goals: kotlin.collections.List<kotlin.String> 
, @RequestParam(value="faculty", required=true) faculty: kotlin.String 
, @RequestParam(value="id", required=false) id: kotlin.Int? 
, @RequestParam(value="motto", required=false) motto: kotlin.String? 
): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @PostMapping(
            value = ["/v1/candidates/{candidateId}/image"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    fun uploadPictureOfCandidate( @PathVariable("candidateId") candidateId: kotlin.Int
, @Valid @RequestPart("file") file: org.springframework.core.io.Resource
): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
